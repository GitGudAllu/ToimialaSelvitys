{"ast":null,"code":"import _slicedToArray from \"/Users/tuomo/PROJEKTITYO\\u0308/ryhmatyo/tklaskuri/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tuomo/PROJEKTITYO\\u0308/ryhmatyo/tklaskuri/src/toimialat.js\";\nimport React, { useState } from 'react';\nimport datatoimialatKunnittain from \"./toimialatKunnittain2\";\nimport dataToimialojenVerot from \"./toimialojenVerot\";\nimport dataPaastot from \"./paastotToimialoittain\"; // asetetaan dataa jsoneista muuttujiin\n\nconst toimialalista = datatoimialatKunnittain.dataset.dimension.Toimiala2008.category.label;\nconst toimialaIndeksit = datatoimialatKunnittain.dataset.dimension.Toimiala2008.category.index;\nconst toimialojenMaarat = datatoimialatKunnittain.dataset.value;\nconst kuntienIndeksit = datatoimialatKunnittain.dataset.dimension.Kunta.category.index;\nconst kuntienNimet = datatoimialatKunnittain.dataset.dimension.Kunta.category.label;\nconst nimiJaIndeksi = dataToimialojenVerot.dataset.dimension.Toimiala.category.index;\nconst toimialojenNimet = dataToimialojenVerot.dataset.dimension.Toimiala.category.label;\nconst toimialojenVerot = dataToimialojenVerot.dataset.value;\nconst toimialojenPaastot = dataPaastot.dataset.value;\nconst toimialojenPaastotIndeksit = dataPaastot.dataset.dimension[\"Toimialat (TOL2008) ja kotitaloudet\"].category.index;\nconsole.log(datatoimialatKunnittain); //Pääkomponentti toimialoille\n\nconst Toimialat = () => {\n  // Counter pitää tiedossa valitun toimialan indeksin\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        counter = _useState2[0],\n        setCounter = _useState2[1];\n\n  const setToValue = value => setCounter(value); //iso läjä listoja\n\n\n  var enitenKunnassa = [];\n  var kuntienNimetTop = [];\n  var kunnanAvain = [];\n  var verotaulukko = [];\n  var alataulukko = [];\n  var maarataulukko = [];\n  var kuntienToimialaLkm = [];\n  var paastotaulukko = [];\n  var toimialojenAvaimet = [];\n  var toimialojenVerotuloKA = [];\n  var toimialojenPaastotKA = [];\n  var kuntienToimialaSL = [];\n  var toimialaSL = [];\n  var kunnanNimiIndeksi;\n  var keskiArvoValue;\n  /*Jokaisen kunnan kaikki toimialat ovat peräkkäin listassa ositettuna \n  (n kpl koko suomen toimialoja, n kpl seuraavan kunnan toimialoja...)\n  Saadaksesi kunnan x kaikki toimialat, aloita ensimmäisestä kyseisen toimialan indeksistä\n  ja hyppää toimialojen lukumäärän verran eteenpäin. \n  */\n\n  function toimialanPaikkakunnat(counter) {\n    var haettavaIndeksi = toimialojenAvaimet[counter];\n    var ekaToimialanArvo = toimialaIndeksit[haettavaIndeksi];\n    var toimialojenLkm = Object.keys(toimialalista).length;\n\n    for (let i = ekaToimialanArvo; i < toimialojenMaarat.length; i = i + toimialojenLkm) {\n      kuntienToimialaLkm.push(toimialojenMaarat[i]);\n    }\n\n    etsiIsoin();\n    keskiArvoValue = keskiArvo(verotaulukko[counter], paastotaulukko[counter]);\n    console.log(\"jaettava \", verotaulukko[counter]);\n    console.log(\"jakaja \", paastotaulukko[counter]);\n    kunnanNimiIndeksi = haeAvain(kuntienIndeksit, enitenKunnassa[1]);\n    console.log(\"keskiarvo \", keskiArvoValue);\n  }\n\n  function laskeToimialojenSL() {\n    for (let i = 0; i < verotaulukko.length; i++) {\n      toimialaSL[i] = keskiArvo(verotaulukko[i], paastotaulukko[i]);\n    }\n  } //Annetaan value, jolle etsitään ja palautetaan sitä vastaava key\n\n\n  function haeAvain(lista, value) {\n    return Object.keys(lista).find(key => lista[key] === value);\n  } //pitää 5:n alkion mittaista järjestettyä listaa eniten valittua toimialaa sisältävien kuntien indekseistä\n\n\n  function etsiIsoin() {\n    var suurin = 0;\n    var maxIndex = 0;\n\n    for (let i = 0; i < kuntienToimialaLkm.length; i++) {\n      enitenKunnassa.push(i);\n\n      if (enitenKunnassa.length > 5) {\n        enitenKunnassa.sort(function (a, b) {\n          return kuntienToimialaLkm[b] - kuntienToimialaLkm[a];\n        });\n        enitenKunnassa.pop();\n      }\n    }\n\n    for (let i = 0; i < 5; i++) {\n      kuntienToimialaSL[i] = toimialaSL[counter] * kuntienNimet[haeAvain(kuntienIndeksit, enitenKunnassa[1])];\n      console.log(\"kuntiennimet \", kuntienNimet);\n      console.log(\"kuntienIndeksit \", kuntienIndeksit);\n      console.log(\"enitenKunnassa \", enitenKunnassa);\n    }\n\n    console.log(\"enitenkunnassa \", enitenKunnassa);\n    console.log(\"kutnientoimialasl \", kuntienToimialaSL);\n  } // laskee keskiarvon, mikäli mahdollista\n\n\n  function keskiArvo(jaettava, jakaja) {\n    if (jaettava == undefined || jakaja == undefined || jakaja == 0) return \"Ei tiedossa\";\n    var keskiArvo = jaettava / jakaja;\n    return keskiArvo;\n  } //Luo ison läjän keyn mukaan indeksöityjä listoja\n  //listasta valittaessa saadaan samalla indeksillä muista listoista oikeita arvoja\n\n\n  function luoTaulukot() {\n    for (let key in toimialalista) {\n      if (key.length === 2) {\n        toimialojenAvaimet.push(key);\n        alataulukko.push(toimialalista[key]);\n        maarataulukko.push(toimialojenMaarat[toimialaIndeksit[key]]);\n        paastotaulukko.push(toimialojenPaastot[toimialojenPaastotIndeksit[key]]);\n\n        if (toimialojenVerot[nimiJaIndeksi[key]] == null) {\n          verotaulukko.push(\"Ei tiedossa\");\n        } else {\n          verotaulukko.push(toimialojenVerot[nimiJaIndeksi[key]]);\n        }\n      }\n    }\n\n    return alataulukko;\n  } //Korvaa toimialojen nimissä olevat numerot ja alun välit tyhjällä\n\n\n  function parsiTaulukko(taulukko) {\n    for (let x in taulukko) {\n      taulukko[x] = taulukko[x].replace(/^[\\s\\d]+/, '');\n    }\n  }\n\n  var toimialaInd = 0;\n  var haettava;\n  var select;\n  var taulukkoToimialoista = luoTaulukot();\n  parsiTaulukko(taulukkoToimialoista);\n  laskeToimialojenSL(); //Hakupalkki, joka vertaa hakupalkin sisältöä select -listan sisältöön ja näyttää vain matchaavat\n\n  const etsiToimiala = hakusana => {\n    haettava = hakusana.target.value;\n    select = document.getElementById(\"listaToimialoista\");\n\n    for (var i = 0; i < select.length; i++) {\n      var txt = select[i].text;\n      var include = txt.toLowerCase().startsWith(haettava.toLowerCase());\n      select.options[i].style.display = include ? '' : 'none';\n    }\n  }; //asettaa countteriin valitun indeksin, josta sitä voi sitten käyttää kaikkialla\n\n\n  const tulostaToimiala = listaValittu => {\n    setToValue(listaValittu.target.value);\n  }; //tämä pitää olla täällä, koska counter\n\n\n  toimialanPaikkakunnat(counter); // jakaa hienosti regexillä luvut kolmen sarjoihin\n\n  function lukupilkuilla(x) {\n    if (x == undefined) return \"Ei tiedossa\";else return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  }\n\n  console.log(kuntienToimialaLkm);\n  return (// Bootstrapin pääcontainer\n    React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"search\",\n      className: \"form-control\",\n      name: \"search\",\n      placeholder: \"Hae...\",\n      onKeyUp: etsiToimiala,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    })), React.createElement(\"select\", {\n      id: \"listaToimialoista\",\n      className: \"form-control\",\n      size: \"30\",\n      onChange: tulostaToimiala,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, taulukkoToimialoista.map(s => React.createElement(\"option\", {\n      value: toimialaInd++,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, s)))), React.createElement(\"div\", {\n      className: \"col-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col jumbotron\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      class: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      class: \"list-group-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      class: \"text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"Toimialan kokonaisp\\xE4\\xE4st\\xF6t: \"), lukupilkuilla(paastotaulukko[counter])), React.createElement(\"li\", {\n      class: \"list-group-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      class: \"text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"Toimialojen kokonaislukum\\xE4\\xE4r\\xE4: \"), \" \", lukupilkuilla(maarataulukko[counter])), React.createElement(\"li\", {\n      class: \"list-group-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \" \", React.createElement(\"small\", {\n      class: \"text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Toimialan verot yhteens\\xE4: \"), \" \", lukupilkuilla(verotaulukko[counter]), \"%\"), React.createElement(\"li\", {\n      class: \"list-group-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \" \", React.createElement(\"small\", {\n      class: \"text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Toimialaa eniten paikkakunnalla: \"), \" \", kuntienNimet[kunnanNimiIndeksi], \" LKM: \", kuntienToimialaLkm[kuntienIndeksit[kunnanNimiIndeksi]], \" kpl\")))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col jumbotron\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btn-group btn-group-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-secondary\",\n      \"aria-pressed\": \"true\",\n      onClick: console.log('tietoja'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"Katotaan my\\xF6hemmin onko n\\xE4m\\xE4 napit tarpeellisia\"), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-secondary\",\n      \"aria-pressed\": \"true\",\n      onClick: console.log('suhdeluku'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Suhdeluku\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Parhaat kunnat toimialalla \\\"\", taulukkoToimialoista[counter], \"\\\": T\\xC4H\\xC4N KUNTA \", kuntienNimet[haeAvain(kuntienIndeksit, enitenKunnassa[1])], \" , JOLLA V\\xC4HITEN P\\xC4\\xC4ST\\xD6J\\xC4 VERRATTUNA TULOIHIN VALITULLA TOIMIALALLA\"))))))\n  );\n};\n\nexport default Toimialat;","map":{"version":3,"sources":["/Users/tuomo/PROJEKTITYÖ/ryhmatyo/tklaskuri/src/toimialat.js"],"names":["React","useState","datatoimialatKunnittain","dataToimialojenVerot","dataPaastot","toimialalista","dataset","dimension","Toimiala2008","category","label","toimialaIndeksit","index","toimialojenMaarat","value","kuntienIndeksit","Kunta","kuntienNimet","nimiJaIndeksi","Toimiala","toimialojenNimet","toimialojenVerot","toimialojenPaastot","toimialojenPaastotIndeksit","console","log","Toimialat","counter","setCounter","setToValue","enitenKunnassa","kuntienNimetTop","kunnanAvain","verotaulukko","alataulukko","maarataulukko","kuntienToimialaLkm","paastotaulukko","toimialojenAvaimet","toimialojenVerotuloKA","toimialojenPaastotKA","kuntienToimialaSL","toimialaSL","kunnanNimiIndeksi","keskiArvoValue","toimialanPaikkakunnat","haettavaIndeksi","ekaToimialanArvo","toimialojenLkm","Object","keys","length","i","push","etsiIsoin","keskiArvo","haeAvain","laskeToimialojenSL","lista","find","key","suurin","maxIndex","sort","a","b","pop","jaettava","jakaja","undefined","luoTaulukot","parsiTaulukko","taulukko","x","replace","toimialaInd","haettava","select","taulukkoToimialoista","etsiToimiala","hakusana","target","document","getElementById","txt","text","include","toLowerCase","startsWith","options","style","display","tulostaToimiala","listaValittu","lukupilkuilla","toString","map","s"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport datatoimialatKunnittain from \"./toimialatKunnittain2\";\nimport dataToimialojenVerot from \"./toimialojenVerot\";\nimport dataPaastot from \"./paastotToimialoittain\";\n\n\n\n\n// asetetaan dataa jsoneista muuttujiin\n\nconst toimialalista = datatoimialatKunnittain.dataset.dimension.Toimiala2008.category.label\nconst toimialaIndeksit = datatoimialatKunnittain.dataset.dimension.Toimiala2008.category.index\nconst toimialojenMaarat = datatoimialatKunnittain.dataset.value\nconst kuntienIndeksit = datatoimialatKunnittain.dataset.dimension.Kunta.category.index\nconst kuntienNimet = datatoimialatKunnittain.dataset.dimension.Kunta.category.label\n\nconst nimiJaIndeksi = dataToimialojenVerot.dataset.dimension.Toimiala.category.index\nconst toimialojenNimet = dataToimialojenVerot.dataset.dimension.Toimiala.category.label\nconst toimialojenVerot = dataToimialojenVerot.dataset.value\n\nconst toimialojenPaastot = dataPaastot.dataset.value\nconst toimialojenPaastotIndeksit = dataPaastot.dataset.dimension[\"Toimialat (TOL2008) ja kotitaloudet\"].category.index;\n\n\n\nconsole.log(datatoimialatKunnittain)\n\n//Pääkomponentti toimialoille\nconst Toimialat = () => {\n\n  // Counter pitää tiedossa valitun toimialan indeksin\n  const [ counter, setCounter ] = useState(0)\n  const setToValue = (value) => setCounter(value)\n  \n  //iso läjä listoja\n  var enitenKunnassa = [];\n  var kuntienNimetTop = [];\n  var kunnanAvain = [];\n  var verotaulukko = [];\n  var alataulukko = [];\n  var maarataulukko = [];\n  var kuntienToimialaLkm = [];\n  var paastotaulukko = [];\n  var toimialojenAvaimet = [];\n  var toimialojenVerotuloKA = [];\n  var toimialojenPaastotKA = [];\n  var kuntienToimialaSL = [];\n  var toimialaSL = [];\n  var kunnanNimiIndeksi;\n\n  var keskiArvoValue;\n  /*Jokaisen kunnan kaikki toimialat ovat peräkkäin listassa ositettuna \n  (n kpl koko suomen toimialoja, n kpl seuraavan kunnan toimialoja...)\n  Saadaksesi kunnan x kaikki toimialat, aloita ensimmäisestä kyseisen toimialan indeksistä\n  ja hyppää toimialojen lukumäärän verran eteenpäin. \n  */\n  function toimialanPaikkakunnat(counter) {\n    var haettavaIndeksi = toimialojenAvaimet[counter]\n    var ekaToimialanArvo = toimialaIndeksit[haettavaIndeksi]\n    var toimialojenLkm = Object.keys(toimialalista).length\n\n    for (let i = ekaToimialanArvo; i < toimialojenMaarat.length; i = (i+toimialojenLkm)){\n      \n      kuntienToimialaLkm.push(toimialojenMaarat[i])\n    }\n\n    etsiIsoin();\n    keskiArvoValue = keskiArvo(verotaulukko[counter], paastotaulukko[counter])\n    console.log(\"jaettava \" , verotaulukko[counter])\n    console.log(\"jakaja \" , paastotaulukko[counter])\n    kunnanNimiIndeksi = haeAvain(kuntienIndeksit, enitenKunnassa[1])\n    console.log(\"keskiarvo \", keskiArvoValue)\n  }\n\n  function laskeToimialojenSL(){\n\n    for (let i = 0; i < verotaulukko.length ;i++){\n\n      toimialaSL[i] = keskiArvo(verotaulukko[i], paastotaulukko[i])\n\n    }\n\n  }\n\n  //Annetaan value, jolle etsitään ja palautetaan sitä vastaava key\n  function haeAvain(lista, value){\n\n  \treturn Object.keys(lista).find(key => lista[key] === value);\n\n  }\n\n  //pitää 5:n alkion mittaista järjestettyä listaa eniten valittua toimialaa sisältävien kuntien indekseistä\n  function etsiIsoin(){\n    \n    var suurin = 0;\n    var maxIndex = 0;\n\n    for (let i = 0; i < kuntienToimialaLkm.length; i++){\n    \tenitenKunnassa.push(i);\n    \tif(enitenKunnassa.length > 5){\n    \t\tenitenKunnassa.sort(function(a,b) { return kuntienToimialaLkm[b] - kuntienToimialaLkm[a];});\n    \t\tenitenKunnassa.pop();\n    \t}\n    }\n    for(let i = 0; i < 5; i++){\n\n      kuntienToimialaSL[i] = (toimialaSL[counter] * kuntienNimet[haeAvain(kuntienIndeksit, enitenKunnassa[1])])\n      console.log(\"kuntiennimet \" , kuntienNimet)\n      console.log(\"kuntienIndeksit \" , kuntienIndeksit)\n      console.log(\"enitenKunnassa \" , enitenKunnassa)\n\n    }\n    console.log(\"enitenkunnassa \" , enitenKunnassa)\n    console.log(\"kutnientoimialasl \" , kuntienToimialaSL)\n       \n  }\n\n  // laskee keskiarvon, mikäli mahdollista\n  function keskiArvo(jaettava, jakaja){\n\n    if(jaettava == undefined || jakaja == undefined || jakaja == 0)\n      return \"Ei tiedossa\"\n    var keskiArvo = (jaettava/jakaja);\n    return keskiArvo;\n\n  }\n  \n  //Luo ison läjän keyn mukaan indeksöityjä listoja\n  //listasta valittaessa saadaan samalla indeksillä muista listoista oikeita arvoja\n  function luoTaulukot() {\n    \n    for (let key in toimialalista){\n      if(key.length === 2){\n\n        toimialojenAvaimet.push(key)\n        alataulukko.push(toimialalista[key])\n        maarataulukko.push(toimialojenMaarat[toimialaIndeksit[key]])\n        paastotaulukko.push(toimialojenPaastot[toimialojenPaastotIndeksit[key]])\n        if (toimialojenVerot[nimiJaIndeksi[key]] == null){\n          \n          verotaulukko.push(\"Ei tiedossa\")\n        } \n        else {\n          \n         verotaulukko.push(toimialojenVerot[nimiJaIndeksi[key]])\n        }\n      } \n    }           \n    \n    return alataulukko;\n  }\n    //Korvaa toimialojen nimissä olevat numerot ja alun välit tyhjällä\n    function parsiTaulukko(taulukko){\n\n      for(let x in taulukko){\n        taulukko[x] = taulukko[x].replace(/^[\\s\\d]+/, '');\n      }\n    }\n\n    var toimialaInd = 0;\n    var haettava;\n    var select;\n    var taulukkoToimialoista = luoTaulukot();\n    parsiTaulukko(taulukkoToimialoista);\n    laskeToimialojenSL();\n\n    \n    //Hakupalkki, joka vertaa hakupalkin sisältöä select -listan sisältöön ja näyttää vain matchaavat\n    const etsiToimiala = (hakusana) => {\n   \n      haettava = hakusana.target.value\n      select = document.getElementById(\"listaToimialoista\");\n      for (var i = 0; i < select.length; i++){\n        var txt = select[i].text\n        var include = txt.toLowerCase().startsWith(haettava.toLowerCase());\n        select.options[i].style.display = include ? '' : 'none';\n     \n      }\n    }\n \n  //asettaa countteriin valitun indeksin, josta sitä voi sitten käyttää kaikkialla\n   const tulostaToimiala = (listaValittu) => {\n    setToValue(listaValittu.target.value)\n \n }\n\n  //tämä pitää olla täällä, koska counter\n  toimialanPaikkakunnat(counter)\n\n\n  // jakaa hienosti regexillä luvut kolmen sarjoihin\n  function lukupilkuilla(x) {\n    if (x == undefined) return \"Ei tiedossa\";\n    else return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  }\n console.log(kuntienToimialaLkm)\n return (\n  // Bootstrapin pääcontainer\n  <div className=\"container\">   \n  \n      <div className=\"row\">\n            <div className=\"col-sm\">\n              \n              <div>\n              <input type=\"text\" id=\"search\" className=\"form-control\" name=\"search\" placeholder=\"Hae...\" onKeyUp={etsiToimiala}/>\n              </div>\n          \n              <select id=\"listaToimialoista\"className=\"form-control\" size=\"30\" onChange={tulostaToimiala} >\n                \n              {taulukkoToimialoista.map(s => (<option value={toimialaInd++}>{s}</option>))}\n              </select>\n\n\n            </div>\n\n            <div className=\"col-6\">\n\n\n            <div className=\"row\">\n            <div className=\"col jumbotron\">\n\n            <ul class=\"list-group\">\n\n      <li class=\"list-group-item\"><small class=\"text-muted\">Toimialan kokonaispäästöt: </small>{lukupilkuilla(paastotaulukko[counter])}</li>\n      <li class=\"list-group-item\"><small class=\"text-muted\">Toimialojen kokonaislukumäärä: </small> {lukupilkuilla(maarataulukko[counter])}</li>\n      <li class=\"list-group-item\"> <small class=\"text-muted\">Toimialan verot yhteensä: </small> {lukupilkuilla(verotaulukko[counter])}%</li>\n      <li class=\"list-group-item\"> <small class=\"text-muted\">Toimialaa eniten paikkakunnalla: </small> {kuntienNimet[kunnanNimiIndeksi]} LKM: {kuntienToimialaLkm[kuntienIndeksit[kunnanNimiIndeksi]]} kpl</li>    \n            </ul>\n\n            </div>\n            </div>\n\n            <div className=\"row\">\n\n            <div className=\"col jumbotron\">\n\n            <div className=\"btn-group btn-group-sm\">\n                <button type=\"button\" className=\"btn btn-secondary\" aria-pressed=\"true\" onClick={console.log('tietoja')}>Katotaan myöhemmin onko nämä napit tarpeellisia</button>\n                <button type=\"button\" className=\"btn btn-secondary\" aria-pressed=\"true\" onClick={console.log('suhdeluku')}>Suhdeluku</button>\n              </div>\n\n            <p></p>\n\n            <p>Parhaat kunnat toimialalla \"{taulukkoToimialoista[counter]}\": TÄHÄN KUNTA {kuntienNimet[haeAvain(kuntienIndeksit, enitenKunnassa[1])]} , JOLLA VÄHITEN PÄÄSTÖJÄ VERRATTUNA TULOIHIN \n              VALITULLA TOIMIALALLA</p>\n\n\n\n            </div>\n            </div>\n\n            </div>\n    </div>\n\n    </div>\n\n        );\n  }\n\n\nexport default Toimialat;"]},"metadata":{},"sourceType":"module"}